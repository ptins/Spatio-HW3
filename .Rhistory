p = seq(0,1,.01)
css = '#stream-items-id , .stream-item~ .stream-item+ .stream-item .js-actionReply .ProfileTweet-actionCountForPresentation , #stream-item-tweet-963845665641189382 .ProfileTweet-actionCountForPresentation'
scraping_wiki <- read_html('https://twitter.com/tomhanks')
library(rvest)
scraping_wiki <- read_html('https://twitter.com/tomhanks')
scraping_wiki %>% html_node(css)
scraping_wiki %>% html_node(css) %>% html_text
css = '.js-actionReply .ProfileTweet-actionCountForPresentation'
library(rvest)
scraping_wiki <- read_html('https://twitter.com/tomhanks')
scraping_wiki %>% html_node(css) %>% html_text
scraping_wiki %>% html_node(css)
userName = "SrBachchan"
##fetch tweets from @userName timeline
tweets = userTimeline(userName,n = 1)
install.packages('twitteR')
# install.packages('twitteR')
library(twitteR)
userName = "SrBachchan"
##fetch tweets from @userName timeline
tweets = userTimeline(userName,n = 1)
api_key <- "6FTGkkHr6qIv6drlW531oLWZH"
api_secret <- "6e3lSCAwy2DZQawH6N7ttTyiHbFUMuJs9GYHTHfKd2mydS2xZB"
access_token <- "1959972582-DfvT6r2zpKLs4BSRd4KSYfxUycGvpinzXMsGcRm"
access_token_secret <- "pCzDlv6AhzK5L8cTUMIVAmRjdVxkOWYzyE1qPUjn2Xch6"
setup_twitter_oauth(api_key,api_secret)
api_secret <- "6e3lSCAwy2DZQawH6N7ttTyiHbFUMuJs9GYHTHfKd2mydS2xZB"
access_token <- "1959972582-DfvT6r2zpKLs4BSRd4KSYfxUycGvpinzXMsGcRm"
access_token_secret <- "pCzDlv6AhzK5L8cTUMIVAmRjdVxkOWYzyE1qPUjn2Xch6"
setup_twitter_oauth(api_key,api_secret)
userName = "SrBachchan"
##fetch tweets from @userName timeline
tweets = userTimeline(userName,n = 1)
## converting tweets list to DataFrame
tweets <- twListToDF(tweets)
## building queryString to fetch retweets
queryString = paste0("to:",userName)
## retrieving tweet ID for which reply is to be fetched
Id = tweets[1,"id"]
## fetching all the reply to userName
rply = searchTwitter(queryString, sinceID = Id)
rply = twListToDF(rply)
## eliminate all the reply other then reply to required tweet Id
rply = rply[!rply$replyToSID > Id,]
rply = rply[!rply$replyToSID < Id,]
rply = rply[complete.cases(rply[,"replyToSID"]),]
rply
userName = "tomhanks"
##fetch tweets from @userName timeline
tweets = userTimeline(userName,n = 1)
## converting tweets list to DataFrame
tweets <- twListToDF(tweets)
## building queryString to fetch retweets
queryString = paste0("to:",userName)
## retrieving tweet ID for which reply is to be fetched
Id = tweets[1,"id"]
## fetching all the reply to userName
rply = searchTwitter(queryString, sinceID = Id)
rply = twListToDF(rply)
## eliminate all the reply other then reply to required tweet Id
rply = rply[!rply$replyToSID > Id,]
rply = rply[!rply$replyToSID < Id,]
rply = rply[complete.cases(rply[,"replyToSID"]),]
rply
head(rply)
View(rply)
View(tweets)
## eliminate all the reply other then reply to required tweet Id
rply = rply[!rply$replyToSID > Id,]
# rply = rply[!rply$replyToSID < Id,]
rply = rply[complete.cases(rply[,"replyToSID"]),]
rm(list=ls())
rm(list=ls())
library(geoR)
library(sp)
library(geoR)
df = read.csv('precip.csv')
head(df)
setwd("~/Documents/SpatioTemporal/HW3")
rm(list=ls())
library(geoR)
library(sp)
library(geoR)
df = read.csv('precip.csv')
head(df)
coordinates(df) = ~LONGITUDE+LATITUDE
bubble(df, 'PRCP', col='grey', maxsize=1.5, pch=19, fill=T)
head(df)
df.geoR = as.geodata(df, data.col=1)
points(df.geoR, ylab="", xlab="", col="gray")
plot(df.geoR)
plot(df.geoR)
geoR
df.geoR
df.geoR[[1]]
df.geoR[[2]]
plot(df.geoR[[1]]$LONGITUDE, df.geoR[[2]])
plot(df.geoR[[1]][LONGITUDE], df.geoR[[2]])
d = df.geoR[[1]]
d[, 1]
d[, 2]
d[, 3]
x_coord = df.geoR[[1]][, 1]
rm(d)
y_coord = df.geoR[[1]][, 2]
[, 1]
y_coord = df.geoR[[1]][, 2]
rain_mm = df.geoR[[2]]
plot(x_coord, rain_mm)
plot(y_coord, rain_mm)
x_fit = lm(rain_mm ~ x_coord)
summary(x_fit)
y_fit = lm(rain_mm ~ y_coord)
summary(y_fit)
abline(y_fit)
abline(y_fit, col='r')
abline(y_fit, col='red')
abline(x_fit, col='red')
plot(x_coord, rain_mm)
x_fit = lm(rain_mm ~ x_coord)
summary(x_fit)
abline(x_fit, col='red')
plot(y_coord, rain_mm)
y_fit = lm(rain_mm ~ y_coord)
summary(y_fit)
abline(y_fit, col='red')
plot(x_coord, rain_mm)
x_fit = lm(rain_mm ~ x_coord)
summary(x_fit)
abline(x_fit, col='red')
plot(y_coord, rain_mm)
y_fit = lm(rain_mm ~ y_coord)
summary(y_fit)
abline(y_fit, col='red')
# example of classical variogram
par(mar=c(2,1,0.5,1))
lz.v = variog(lz.geoR,max.dist=1500)
plot(lz.v,pch=19)
# example of robust variogram
lz.v2 = variog(lz.geoR,max.dist=1500,estimator.type = c("modulus"))
rm(list=ls())
library(geoR)
library(sp)
library(geoR)
df = read.csv('precip.csv')
head(df)
coordinates(df) = ~LONGITUDE+LATITUDE
bubble(df, 'PRCP', col='grey', maxsize=1.5, pch=19, fill=T)
head(df)
df.geoR = as.geodata(df, data.col=1)
points(df.geoR, ylab="", xlab="", col="gray")
plot(df.geoR)
df.geoR
plot(df.geoR[[0]])
x_coord = df.geoR[[1]][, 1]
y_coord = df.geoR[[1]][, 2]
rain_mm = df.geoR[[2]]
plot(x_coord, rain_mm)
x_coord = df.geoR[[1]][, 1]
y_coord = df.geoR[[1]][, 2]
rain_mm = df.geoR[[2]]
plot(x_coord, rain_mm)
x_fit = lm(rain_mm ~ x_coord)
summary(x_fit)
abline(x_fit, col='red')
plot(y_coord, rain_mm)
y_fit = lm(rain_mm ~ y_coord)
summary(y_fit)
abline(y_fit, col='red')
lz.geoR = df.geoR
lz.geoR$data = log(df.geoR$data)
# example of classical variogram
par(mar=c(2,1,0.5,1))
lz.v = variog(lz.geoR,max.dist=1500)
plot(lz.v,pch=19)
# example of robust variogram
lz.v2 = variog(lz.geoR,max.dist=1500,estimator.type = c("modulus"))
# comparison of classical vs robust variogram
plot(lz.v,pch=19)
lines(lz.v2,type="p",pch=10)
legend(0,1.0,pch=c(19,10),c("classic","robust"),cex=0.8)
plot(lz.v,pch=19, main='Variograms')
# example of classical variogram
par(mar=c(2,1,0.5,1))
lz.v = variog(lz.geoR,max.dist=1500)
plot(lz.v,pch=19)
# example of robust variogram
lz.v2 = variog(lz.geoR,max.dist=1500,estimator.type = c("modulus"))
# comparison of classical vs robust variogram
plot(lz.v,pch=19)
lines(lz.v2,type="p",pch=10)
legend(0,1.0,pch=c(19,10),c("classic","robust"),cex=0.8)
plot(lz.v,pch=19)
lines(lz.v2,type="p",pch=10)
legend(0,1.0,pch=c(19,10),c("classic","robust"),cex=0.8)
# example of classical variogram
par(mar=c(2,1,0.5,1))
# comparison of classical vs robust variogram
plot(lz.v,pch=19)
lines(lz.v2,type="p",pch=10)
legend(0,1.0,pch=c(19,10),c("classic","robust"),cex=0.8)
source('~/Documents/SpatioTemporal/HW3/script2.R', echo=TRUE)
source('~/Documents/SpatioTemporal/HW3/script2.R', echo=TRUE)
View(lz.v2)
# example of classical variogram
par(mar=c(2,1,0.5,1))
lz.v = variog(lz.geoR, max.dist=1500)
plot(lz.v)
# example of classical variogram
# par(mar=c(2,1,0.5,1))
par(mfcol=c(2,1))
lz.v = variog(lz.geoR, max.dist=1500)
plot(lz.v)
# example of robust variogram
lz.v2 = variog(lz.geoR, max.dist=1500, estimator.type = c("modulus"))
plot(lz.v)
plot(lz.v2)
# example of classical variogram
# par(mar=c(2,1,0.5,1))
par(mfcol=c(2,1))
lz.v = variog(lz.geoR, max.dist=1500)
plot(lz.v)
# example of robust variogram
lz.v2 = variog(lz.geoR, max.dist=1500, estimator.type = c("modulus"))
plot(lz.v2)
# example of classical variogram
# par(mar=c(2,1,0.5,1))
par(mfcol=c(2,1))
lz.v = variog(lz.geoR, max.dist=1500)
plot(lz.v)
# example of robust variogram
lz.v2 = variog(lz.geoR, max.dist=1500, estimator.type = c("modulus"))
plot(lz.v2)
# comparison of classical vs robust variogram
plot(lz.v,pch=19)
# example of classical variogram
# par(mar=c(2,1,0.5,1))
par(mfcol=c(2,1))
lz.v = variog(lz.geoR, max.dist=1500)
plot(lz.v)
# example of robust variogram
lz.v2 = variog(lz.geoR, max.dist=1500, estimator.type = c("modulus"))
plot(lz.v2)
# example of classical variogram
# par(mar=c(2,1,0.5,1))
par(mfcol=c(1,1))
lz.v = variog(lz.geoR, max.dist=1500)
plot(lz.v)
# example of robust variogram
lz.v2 = variog(lz.geoR, max.dist=1500, estimator.type = c("modulus"))
plot(lz.v2)
for_plotting <- data.frame(lz.v$u,y1,y2)
lz.v$u
lz.v$v
lz.v$n
lz.v$sd
lz.v$ind.bin
lz.v$bins.lim
lz.v$
u
lz.v2$u
y2=lz.v2$v
for_plotting <- data.frame(x,y1,y2)
x=lz.v$u
y1=lz.v$v
y2=lz.v2$v
for_plotting <- data.frame(x,y1,y2)
ggplot(df, aes(x)) +                    # basic graphical object
geom_line(aes(y=y1), colour="red") +  # first layer
geom_line(aes(y=y2), colour="green")  # second layer
require(ggplot2)
ggplot(df, aes(x)) +                    # basic graphical object
geom_line(aes(y=y1), colour="red") +  # first layer
geom_line(aes(y=y2), colour="green")  # second layer
for_plotting <- data.frame(x,y1,y2)
ggplot(for_plotting, aes(x)) +                    # basic graphical object
geom_line(aes(y=y1), colour="red") +  # first layer
geom_line(aes(y=y2), colour="green")  # second layer
# comparison of classical vs robust variogram
plot(lz.v2,pch=19)
lines(lz.v, type="p", pch=10)
legend(0, 1.0, pch=c(19,10), c("robust","classic"), cex=0.8)
x=lz.v$u
y1=lz.v$v
y2=lz.v2$v
for_plotting <- data.frame(x,y1,y2)
require(ggplot2)
ggplot(for_plotting, aes(x)) +                    # basic graphical object
geom_line(aes(y=y1), colour="red") +  # first layer
geom_line(aes(y=y2), colour="green")  # second layer
# comparison of classical vs robust variogram
plot(lz.v2,pch=19)
lines(lz.v, type="p", pch=10)
legend(0, 1.0, pch=c(19,10), c("robust","classic"), cex=0.8)
legend(0, 2.0, pch=c(19,10), c("robust","classic"), cex=0.8)
# comparison of classical vs robust variogram
plot(lz.v2,pch=19)
lines(lz.v, type="p", pch=10)
legend(0, 2.0, pch=c(19,10), c("robust","classic"), cex=0.8)
